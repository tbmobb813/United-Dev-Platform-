name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: 'latest'

jobs:
  setup:
    name: Setup and Cache
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    outputs:
      pnpm-cache-dir: ${{ steps.pnpm-cache.outputs.pnpm-cache-dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack & pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Debug pnpm availability
        run: |
          echo "--- env ---"
          env | sort
          echo "--- versions ---"
          node --version
          npm --version
          corepack --version 2>/dev/null || echo 'corepack not found'
          pnpm --version 2>/dev/null || echo 'pnpm not found'
          which pnpm || true
          echo "--- PATH ---"
          echo "$PATH"


      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "pnpm-cache-dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  lint:
    name: Lint and Format Check
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack & pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Debug pnpm availability
        run: |
          echo "--- env ---"
          env | sort
          echo "--- versions ---"
          node --version
          npm --version
          corepack --version 2>/dev/null || echo 'corepack not found'
          pnpm --version 2>/dev/null || echo 'pnpm not found'
          which pnpm || true
          echo "--- PATH ---"
          echo "$PATH"


      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Debug Prettier environment (temporary)
        run: |
          echo "--- git ---"
          git rev-parse --short HEAD
          git status --porcelain || true
          echo "--- versions ---"
          node --version
          pnpm --version || true
          pnpm exec -- prettier --version || true
          echo "--- prettier config path ---"
          pnpm exec -- prettier --find-config-path packages/ai/AIAssistant.tsx || true

      - name: Check Prettier formatting
        run: pnpm format:check

  type-check:
    name: TypeScript Type Check
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack & pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Debug pnpm availability
        run: |
          echo "--- env ---"
          env | sort
          echo "--- versions ---"
          node --version
          npm --version
          corepack --version 2>/dev/null || echo 'corepack not found'
          pnpm --version 2>/dev/null || echo 'pnpm not found'
          which pnpm || true
          echo "--- PATH ---"
          echo "$PATH"


      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type check
        run: pnpm type-check

  test:
    name: Run Tests
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack & pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Debug pnpm availability
        run: |
          echo "--- env ---"
          env | sort
          echo "--- versions ---"
          node --version
          npm --version
          corepack --version 2>/dev/null || echo 'corepack not found'
          pnpm --version 2>/dev/null || echo 'pnpm not found'
          which pnpm || true
          echo "--- PATH ---"
          echo "$PATH"


      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

  validate-env:
    name: Validate Environment
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack & pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate


      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install dotenv for validation script
        run: pnpm add -Dw dotenv

      - name: Validate environment configuration
        env:
          NODE_ENV: development
          NEXT_PUBLIC_APP_NAME: United Dev Platform
          NEXT_PUBLIC_APP_VERSION: 1.0.0
          NEXT_PUBLIC_APP_URL: http://localhost:3000
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_WS_URL: ws://localhost:3001
        run: pnpm validate-env

  build:
    name: Build Applications
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    needs: [setup, lint, type-check, test, validate-env]
    strategy:
      matrix:
        app: [web, api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack & pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build ${{ matrix.app }}
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_NAME: United Dev Platform
          NEXT_PUBLIC_APP_VERSION: 1.0.0
          NEXT_PUBLIC_APP_URL: https://udp.example.com
          NEXT_PUBLIC_API_URL: https://api.udp.example.com
          NEXT_PUBLIC_WS_URL: wss://api.udp.example.com
        run: cd apps/${{ matrix.app }} && pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: apps/${{ matrix.app }}/.next/
          retention-days: 7

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.actor != 'github-actions[bot]' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
    strategy:
      matrix:
        service: [web, api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.service }}
          push: false
          tags: udp-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  security-scan:
    name: Security Scan
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack & pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate


      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level moderate

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker-build, security-scan]
    if: ${{ github.actor != 'github-actions[bot]' && github.ref == 'refs/heads/develop' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "This would typically involve:"
          echo "- Pulling Docker images"
          echo "- Updating container orchestration"
          echo "- Running database migrations"
          echo "- Performing health checks"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker-build, security-scan]
    if: ${{ github.actor != 'github-actions[bot]' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "This would typically involve:"
          echo "- Pulling Docker images"
          echo "- Blue-green deployment"
          echo "- Database migrations"
          echo "- Health checks and rollback capability"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: ${{ github.actor != 'github-actions[bot]' && always() }}
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed or skipped"
          fi
