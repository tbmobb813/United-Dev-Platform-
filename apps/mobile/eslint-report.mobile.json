[{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/App.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/app/(tabs)/collaborate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setRoomId' is assigned a value but never used.","line":8,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[935,984],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1114,1176],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Alert, StyleSheet, Text, View } from 'react-native';\nimport { CollaborativeEditor } from '../../components/CollaborativeEditor';\n\nexport default function CollaborateScreen() {\n  const [userId, setUserId] = useState<string>('');\n  const [userName, setUserName] = useState<string>('');\n  const [roomId, setRoomId] = useState<string>('default-room');\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    loadUserData();\n  }, []);\n\n  const loadUserData = async () => {\n    try {\n      // For now, generate user data (in a real app, you'd use AsyncStorage)\n      const storedUserId = `mobile-user-${Date.now()}`;\n      const storedUserName = `Mobile User ${storedUserId.slice(-4)}`;\n\n      setUserId(storedUserId);\n      setUserName(storedUserName);\n      setIsReady(true);\n    } catch (error) {\n      Alert.alert('Error', 'Failed to load user data');\n      console.error('Error loading user data:', error);\n    }\n  };\n\n  const handleContentChange = (content: string) => {\n    // Handle content changes (e.g., save to local storage)\n    console.log('Content updated:', content.length, 'characters');\n  };\n\n  if (!isReady) {\n    return (\n      <View style={styles.loadingContainer}>\n        <Text style={styles.loadingText}>Initializing...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <CollaborativeEditor\n        roomId={roomId}\n        documentId='main-document'\n        userId={userId}\n        userName={userName}\n        onContentChange={handleContentChange}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ffffff',\n  },\n  loadingText: {\n    fontSize: 16,\n    color: '#6b7280',\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/components/CollaborativeEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/components/FileBrowser.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/components/FileNavigator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/components/FileViewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'aiResponse' is assigned a value but never used.","line":36,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button, Card, Loading, Stack } from '@udp/ui-native';\nimport React, { useEffect, useState } from 'react';\nimport {\n  Alert,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TextInput,\n  View,\n} from 'react-native';\nimport { AIService, ApiService } from '../services';\nimport { FileNode } from './FileBrowser';\n\ninterface FileViewerProps {\n  file: FileNode;\n  projectId?: string; // Add project ID for API calls\n  onClose: () => void;\n  onEdit?: (content: string) => void;\n  readOnly?: boolean;\n  showAIActions?: boolean;\n}\n\nexport const FileViewer: React.FC<FileViewerProps> = ({\n  file,\n  projectId,\n  onClose,\n  onEdit,\n  readOnly = true,\n  showAIActions = true,\n}) => {\n  const [content, setContent] = useState<string>('');\n  const [loading, setLoading] = useState(true);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedContent, setEditedContent] = useState<string>('');\n  const [aiLoading, setAiLoading] = useState(false);\n  const [aiResponse, setAiResponse] = useState<string>('');\n\n  useEffect(() => {\n    loadFileContent();\n  }, [file.path]);\n\n  const loadFileContent = async () => {\n    setLoading(true);\n    try {\n      // Try to load content from API if file has ID and projectId\n      if (file.id && projectId) {\n        const response = await ApiService.getMobileFileContent(\n          projectId,\n          file.id\n        );\n\n        if (response.error) {\n          Alert.alert('Error', response.error);\n          return;\n        }\n\n        if (response.data !== undefined) {\n          setContent(response.data);\n          setEditedContent(response.data);\n          return;\n        }\n      }\n\n      // Fallback to existing content or mock data\n      if (file.content !== undefined) {\n        setContent(file.content);\n        setEditedContent(file.content);\n      } else {\n        const mockContent = await getMockFileContent(file);\n        setContent(mockContent);\n        setEditedContent(mockContent);\n      }\n    } catch {\n      Alert.alert('Error', 'Failed to load file content');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n\n  const handleSave = async () => {\n    try {\n      // Try to save via API if file has ID and projectId\n      if (file.id && projectId) {\n        const response = await ApiService.saveMobileFileContent(\n          projectId,\n          file.id,\n          editedContent\n        );\n\n        if (response.error) {\n          Alert.alert('Error', `Failed to save: ${response.error}`);\n          return;\n        }\n\n        Alert.alert('Success', 'File saved successfully!');\n      }\n\n      // Update local state and call parent handler\n      onEdit?.(editedContent);\n      setContent(editedContent);\n      setIsEditing(false);\n    } catch {\n      Alert.alert('Error', 'Failed to save file');\n    }\n  };\n\n  const handleCancel = () => {\n    setEditedContent(content);\n    setIsEditing(false);\n  };\n\n  const handleAIAction = async (\n    action: 'explain' | 'test' | 'optimize' | 'summarize'\n  ) => {\n    if (!content.trim()) {\n      Alert.alert('No Content', 'No file content to analyze');\n      return;\n    }\n\n    setAiLoading(true);\n    setAiResponse('');\n\n    try {\n      let aiStream;\n      const fileName = file.name;\n      const language = file.language;\n\n      switch (action) {\n        case 'explain':\n          aiStream = AIService.explainCode(content, fileName, language);\n          break;\n        case 'test':\n          aiStream = AIService.generateTests(content, fileName, language);\n          break;\n        case 'optimize':\n          aiStream = AIService.optimizeCode(content, fileName, language);\n          break;\n        case 'summarize':\n          aiStream = AIService.summarizeCode(content, fileName, language);\n          break;\n        default:\n          throw new Error('Unknown AI action');\n      }\n\n      let accumulatedResponse = '';\n      const aiGenerator = await aiStream;\n      for await (const response of aiGenerator) {\n        accumulatedResponse = response.content;\n        setAiResponse(accumulatedResponse);\n\n        if (response.error) {\n          Alert.alert('AI Error', response.error);\n          break;\n        }\n\n        if (response.finished) {\n          break;\n        }\n      }\n\n      // Show the AI response in a modal/alert for now\n      if (accumulatedResponse) {\n        Alert.alert(\n          `AI ${action.charAt(0).toUpperCase() + action.slice(1)}`,\n          accumulatedResponse,\n          [{ text: 'OK' }]\n        );\n      }\n    } catch {\n      Alert.alert('Error', `AI ${action} failed`);\n    } finally {\n      setAiLoading(false);\n    }\n  };\n\n  const getFileLanguage = (): string => {\n    const ext = file.extension?.toLowerCase();\n    const languageMap: Record<string, string> = {\n      js: 'javascript',\n      jsx: 'javascript',\n      ts: 'typescript',\n      tsx: 'typescript',\n      py: 'python',\n      java: 'java',\n      css: 'css',\n      html: 'html',\n      json: 'json',\n      md: 'markdown',\n      yml: 'yaml',\n      yaml: 'yaml',\n    };\n    return languageMap[ext || ''] || 'text';\n  };\n\n  const formatFileSize = (bytes?: number): string => {\n    if (!bytes) {\n      return '';\n    }\n    const kb = bytes / 1024;\n    if (kb < 1024) {\n      return `${kb.toFixed(1)}KB`;\n    }\n    return `${(kb / 1024).toFixed(1)}MB`;\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <Loading text='Loading file...' />\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Header with file info */}\n      <Card title={`📄 ${file.name}`} padding='medium' style={{}}>\n        <Stack gap='small' style={{}}>\n          <View style={styles.fileInfo}>\n            <Text style={styles.filePath}>{file.path}</Text>\n            <View style={styles.fileMetadata}>\n              <Text style={styles.metadataText}>\n                {file.language || getFileLanguage()}\n              </Text>\n              {file.size && (\n                <Text style={styles.metadataText}>\n                  • {formatFileSize(file.size)}\n                </Text>\n              )}\n            </View>\n          </View>\n\n          {/* Action buttons */}\n          <Stack direction='row' gap='small' style={{}}>\n            <Button\n              title='⬅️ Back'\n              onPress={onClose}\n              variant='secondary'\n              size='small'\n              style={{}}\n            />\n            {!readOnly && !isEditing && (\n              <Button\n                title='✏️ Edit'\n                onPress={handleEdit}\n                size='small'\n                style={{}}\n              />\n            )}\n            {isEditing && (\n              <>\n                <Button\n                  title='💾 Save'\n                  onPress={handleSave}\n                  size='small'\n                  style={{}}\n                />\n                <Button\n                  title='❌ Cancel'\n                  onPress={handleCancel}\n                  variant='secondary'\n                  size='small'\n                  style={{}}\n                />\n              </>\n            )}\n          </Stack>\n        </Stack>\n      </Card>\n\n      {/* File content */}\n      <View style={styles.contentContainer}>\n        {isEditing ? (\n          <TextInput\n            style={styles.editor}\n            value={editedContent}\n            onChangeText={setEditedContent}\n            multiline\n            placeholder='Start typing...'\n            scrollEnabled\n          />\n        ) : (\n          <ScrollView style={styles.scrollView} showsVerticalScrollIndicator>\n            <Text style={styles.viewer}>{content}</Text>\n          </ScrollView>\n        )}\n      </View>\n\n      {/* AI Actions Footer */}\n      {showAIActions && (\n        <View style={styles.aiActions}>\n          <Stack direction='row' gap='small' style={{}}>\n            <Button\n              title='🤖 Explain'\n              onPress={() => handleAIAction('explain')}\n              size='small'\n              variant='outline'\n              style={{}}\n              disabled={aiLoading}\n            />\n            <Button\n              title='🧪 Tests'\n              onPress={() => handleAIAction('test')}\n              size='small'\n              variant='outline'\n              style={{}}\n              disabled={aiLoading}\n            />\n            <Button\n              title='⚡ Optimize'\n              onPress={() => handleAIAction('optimize')}\n              size='small'\n              variant='outline'\n              style={{}}\n              disabled={aiLoading}\n            />\n          </Stack>\n          {aiLoading && (\n            <View style={styles.aiLoadingContainer}>\n              <Loading text='AI processing...' />\n            </View>\n          )}\n        </View>\n      )}\n    </View>\n  );\n};\n\n// Mock function to simulate loading file content\nasync function getMockFileContent(file: FileNode): Promise<string> {\n  // TODO: Replace with actual API call\n  const extension = file.extension?.toLowerCase();\n\n  switch (extension) {\n    case 'tsx':\n    case 'jsx':\n      return `import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\ninterface ${file.name.replace('.tsx', '').replace('.jsx', '')}Props {\n  title: string;\n  onPress?: () => void;\n}\n\nexport const ${file.name\n        .replace('.tsx', '')\n        .replace('.jsx', '')}: React.FC<${file.name\n        .replace('.tsx', '')\n        .replace('.jsx', '')}Props> = ({\n  title,\n  onPress,\n}) => {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{title}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    backgroundColor: '#ffffff',\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#333333',\n  },\n});`;\n\n    case 'ts':\n      return `export interface ${file.name.replace('.ts', '')} {\n  id: string;\n  name: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport class ${file.name.replace('.ts', '')}Service {\n  async findById(id: string): Promise<${file.name.replace('.ts', '')} | null> {\n    // Implementation here\n    return null;\n  }\n\n  async create(data: Partial<${file.name.replace(\n    '.ts',\n    ''\n  )}>): Promise<${file.name.replace('.ts', '')}> {\n    // Implementation here\n    throw new Error('Not implemented');\n  }\n}`;\n\n    case 'json':\n      return `{\n  \"name\": \"@udp/mobile\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Mobile app for United Development Platform\",\n  \"main\": \"App.js\",\n  \"scripts\": {\n    \"start\": \"expo start\",\n    \"android\": \"expo run:android\",\n    \"ios\": \"expo run:ios\"\n  },\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-native\": \"0.74.0\",\n    \"expo\": \"^51.0.0\"\n  }\n}`;\n\n    case 'md':\n      return `# ${file.name.replace('.md', '')}\n\nThis is a sample markdown file showing the file viewer capabilities.\n\n## Features\n\n- **Syntax highlighting** for multiple languages\n- **Read-only and edit modes** \n- **AI-powered actions** for code assistance\n- **Mobile-optimized interface**\n\n## Code Example\n\n\\`\\`\\`typescript\ninterface FileNode {\n  name: string;\n  path: string;\n  type: 'file' | 'directory';\n  content?: string;\n}\n\\`\\`\\`\n\n## Links\n\n- [Documentation](https://docs.example.com)\n- [GitHub Repository](https://github.com/example/repo)`;\n\n    default:\n      return `This is a sample file: ${file.name}\n\nPath: ${file.path}\nType: ${file.type}\nLanguage: ${file.language || 'Unknown'}\n\nThis file viewer supports syntax highlighting for multiple programming languages\nand provides a mobile-optimized reading and editing experience.\n\nTODO: Replace this mock content with actual file content from your backend API.`;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ffffff',\n  },\n  fileInfo: {\n    gap: 8,\n  },\n  filePath: {\n    fontSize: 14,\n    color: '#6b7280',\n    fontFamily: 'monospace',\n  },\n  fileMetadata: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  metadataText: {\n    fontSize: 12,\n    color: '#9ca3af',\n  },\n  contentContainer: {\n    flex: 1,\n    backgroundColor: '#f8f9fa',\n    margin: 16,\n    borderRadius: 8,\n    overflow: 'hidden',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  editor: {\n    flex: 1,\n    fontSize: 14,\n    fontFamily: 'monospace',\n    padding: 16,\n    textAlignVertical: 'top',\n    color: '#333333',\n  },\n  viewer: {\n    fontSize: 14,\n    fontFamily: 'monospace',\n    padding: 16,\n    color: '#333333',\n    lineHeight: 20,\n  },\n  aiActions: {\n    padding: 16,\n    backgroundColor: '#f9fafb',\n    borderTopWidth: 1,\n    borderTopColor: '#e5e7eb',\n  },\n  aiLoadingContainer: {\n    marginTop: 12,\n    alignItems: 'center',\n  },\n});\n\nexport default FileViewer;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/components/MobileHome.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/services/AIService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/services/ApiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]},{"filePath":"/workspaces/United-Dev-Platform-/apps/mobile/services/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"jsx-quotes","replacedBy":[]}]}]